{"version":3,"sources":["Constants.js","components/Dice.js","components/AppHeader.js","components/Penalties.js","components/PointsList.js","services/DBService.js","components/Row.js","hooks/useScoreCard.js","components/TotalsRow.js","components/ScoreCard.js","App.js","serviceWorker.js","index.js"],"names":["POINT_VALUES","STATES","dice","white","dotColor","faceColor","numDice","ref","red","yellow","green","blue","Dice","props","className","onClick","rollDice","getDice","scoreCard","locked","displayName","key","defaultRoll","dieSize","margin","rollTime","_dice","rollAll","AppHeader","Button","variant","onReset","CHECKED_BOXES","Penalties","toggleButtonGroupProps","type","onChange","checkedValues","onBoxToggled","length","value","penalties","ToggleButtonGroup","getToggleButton","checkboxProps","size","ToggleButton","PointsList","values","i","push","getPointValue","dbPromise","Row","event","color","target","buttonProps","active","buttons","extraProps","boxState","disabled","checked","reversed","reverse","lockButtonProps","getButtons","upgrade","db","oldVersion","newVersion","tx","createObjectStore","initDB","a","openDB","blocked","console","log","blocking","terminated","saveScoreCard","scorecard","put","getScoreCard","get","INITIAL_ROW_STATE","2","3","4","5","6","7","8","9","10","11","12","INITIAL_REVERSED_ROW_STATE","initialState","produce","winCount","markIntermediateBoxes","row","box","oldState","newState","index","Number","useScoreCard","useState","then","setScores","scores","getFinalBox","reset","setPenalties","penaltyCount","current","toggleBox","finalBox","unlockRowForOtherPlayer","markBoxWon","lockRowForOtherPlayer","markBoxOpen","TotalsRow","totals","getTotals","total","getScore","count","countWonBoxes","ScoreCard","rowProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","init","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c7ba67c7.chunk.js","sourcesContent":["export const LOCK_COLUMN = 13;\n\nexport const PENALTY = 5;\n\nexport const POINT_VALUES = [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78];\n\nexport const STATES = {\n  BLOCKED: \"BLOCKED\",\n  DISABLED: \"DISABLED\",\n  LOCKED: \"LOCKED\",\n  OPEN: \"OPEN\",\n  UNLOCKED: \"UNLOCKED\",\n  WON: \"WON\",\n};\n\nexport const WINS_NEEDED_TO_LOCK_ROW = 5;\n\n// Colors\nexport const BLACK = \"black\";\nexport const BLUE = \"blue\";\nexport const GREEN = \"green\";\nexport const RED = \"red\";\nexport const WHITE = \"white\";\nexport const YELLOW = \"#EFEF6D\";\n","import React from \"react\";\n\nimport ReactDice from \"react-dice-complete\";\nimport \"react-dice-complete/dist/react-dice-complete.css\";\n\nimport { BLACK, BLUE, GREEN, RED, YELLOW, WHITE } from \"../Constants\";\n\nimport \"./Dice.scss\";\n\nconst displayName = \"Dice\";\n\nconst dice = {\n  white: {\n    dotColor: BLACK,\n    faceColor: WHITE,\n    numDice: 2,\n    ref: null,\n  },\n  red: {\n    dotColor: WHITE,\n    faceColor: RED,\n    numDice: 1,\n    ref: null,\n  },\n  yellow: {\n    dotColor: WHITE,\n    faceColor: YELLOW,\n    numDice: 1,\n    ref: null,\n  },\n  green: {\n    dotColor: WHITE,\n    faceColor: GREEN,\n    numDice: 1,\n    ref: null,\n  },\n  blue: {\n    dotColor: WHITE,\n    faceColor: BLUE,\n    numDice: 1,\n    ref: null,\n  },\n};\n\nconst Dice = (props) => {\n  return (\n    <div className=\"DiceContainer\" onClick={rollDice}>\n      {getDice(\"white\")}\n      {props.scoreCard.red.locked === false ? getDice(\"red\") : null}\n      {props.scoreCard.yellow.locked === false ? getDice(\"yellow\") : null}\n      {props.scoreCard.green.locked === false ? getDice(\"green\") : null}\n      {props.scoreCard.blue.locked === false ? getDice(\"blue\") : null}\n    </div>\n  );\n};\n\nDice.displayName = displayName;\n\nconst getDice = (key) => {\n  const props = {\n    defaultRoll: 6,\n    dieSize: 35,\n    margin: 8,\n    numDice: 1,\n    rollTime: 1.5,\n    ...dice[key],\n    ref: (_dice) => (dice[key].ref = _dice),\n  };\n  return <ReactDice {...props} />;\n};\n\nconst rollDice = () => {\n  dice.white.ref.rollAll();\n  dice.red.ref && dice.red.ref.rollAll();\n  dice.yellow.ref && dice.yellow.ref.rollAll();\n  dice.green.ref && dice.green.ref.rollAll();\n  dice.blue.ref && dice.blue.ref.rollAll();\n};\n\nexport default Dice;\n","import React from \"react\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Dice from \"./Dice\";\n\nimport \"./AppHeader.scss\";\n\nconst displayName = \"AppHeader\";\n\nconst AppHeader = (props) => {\n  return (\n    <div className={displayName}>\n      <Dice scoreCard={props.scoreCard} />\n      <span className=\"Title\">QWIXX.APP</span>\n      <Button\n        className=\"ResetButton\"\n        variant=\"secondary\"\n        onClick={props.onReset}\n      />\n    </div>\n  );\n};\n\nexport default AppHeader;\n","import React from \"react\";\n\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\n\nimport \"./Penalties.scss\";\n\nconst CHECKED_BOXES = [[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 4]];\nconst displayName = \"Penalties\";\n\nconst Penalties = (props) => {\n  const onBoxToggled = (checkedValues) => {\n    props.onBoxToggled(checkedValues.length);\n  };\n\n  const toggleButtonGroupProps = {\n    type: \"checkbox\",\n    onChange: onBoxToggled,\n    value: CHECKED_BOXES[props.penalties],\n  };\n\n  return (\n    <div className={`${displayName}`}>\n      <span className=\"PenaltyText\">Penalties (-5 for each)</span>\n      <ToggleButtonGroup {...toggleButtonGroupProps}>\n        {getToggleButton(1)}\n        {getToggleButton(2)}\n        {getToggleButton(3)}\n        {getToggleButton(4)}\n      </ToggleButtonGroup>\n    </div>\n  );\n};\n\nPenalties.displayName = displayName;\n\nconst getToggleButton = (value) => {\n  const checkboxProps = {\n    size: \"lg\",\n    type: \"checkbox\",\n    variant: \"outline-danger\",\n    value,\n  };\n\n  return <ToggleButton {...checkboxProps} />;\n};\n\nexport default Penalties;\n","import React from \"react\";\n\nimport { POINT_VALUES } from \"../Constants\";\n\nimport \"./PointsList.scss\";\n\nconst displayName = \"PointsList\";\n\nconst PointsList = (props) => {\n  const values = [];\n  for (let i = 1; i <= 12; i++) {\n    values.push(getPointValue(i));\n  }\n\n  return (\n    <div className=\"PointsList\">\n      <span>Points:</span>\n      {values}\n    </div>\n  );\n};\n\nPointsList.displayName = displayName;\n\nconst getPointValue = (value) => {\n  return (\n    <div className=\"PointValue\" key={value}>\n      <div className=\"Multiplier\">{`${value}x`}</div>\n      <div className=\"Value\">{POINT_VALUES[value]}</div>\n    </div>\n  );\n};\n\nexport default PointsList;\n","import { openDB } from \"idb\";\n\nconst CURRENT_SCORECARD_KEY = \"current\";\nconst DATABASE_NAME = \"QWIXX\";\nconst DATABASE_VERSION = 1;\nconst SCORECARD_STORE = \"ScoreCards\";\n\nconst upgrade = (db, oldVersion, newVersion, tx) => {\n  debugger;\n  if (oldVersion === 0) {\n    db.createObjectStore(SCORECARD_STORE);\n  }\n};\n\nlet dbPromise;\n\nexport const initDB = async () => {\n  dbPromise = await openDB(DATABASE_NAME, DATABASE_VERSION, {\n    upgrade,\n    blocked() {\n      console.log(\"[openDB]: blocked\");\n    },\n    blocking() {\n      console.log(\"[openDB]: blocking\");\n    },\n    terminated() {\n      console.log(\"[openDB]: terminated\");\n    },\n  });\n  return dbPromise;\n};\n\nexport const saveScoreCard = async (scorecard) => {\n  return await dbPromise.put(SCORECARD_STORE, scorecard, CURRENT_SCORECARD_KEY);\n};\n\nexport const getScoreCard = async () => {\n  return dbPromise.get(SCORECARD_STORE, CURRENT_SCORECARD_KEY);\n};\n","import React from \"react\";\n\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\n\nimport \"./Row.scss\";\nimport { STATES, LOCK_COLUMN } from \"../Constants\";\n\nconst displayName = \"Row\";\n\nconst Row = (props) => {\n  const onBoxToggled = (event) => {\n    props.onBoxToggled(props.color, event.target.value);\n  };\n\n  const getButtons = () => {\n    const buttonProps = {\n      active: false,\n      onChange: onBoxToggled,\n      size: \"lg\",\n      type: \"checkbox\",\n      variant: \"outline-primary\",\n    };\n\n    const buttons = [];\n    for (let i = 2; i <= 12; i++) {\n      const extraProps = {\n        className: `btn-${props.boxState[i]} btn-${i}`,\n        key: i,\n        value: i,\n      };\n\n      switch (props.boxState[i]) {\n        case STATES.BLOCKED:\n        case STATES.LOCKED:\n          extraProps.disabled = true;\n          break;\n\n        case STATES.WON:\n          extraProps.checked = true;\n          break;\n\n        default:\n          break;\n      }\n\n      buttons.push(\n        <ToggleButton {...buttonProps} {...extraProps}>\n          {i}\n        </ToggleButton>\n      );\n    }\n\n    if (props.reversed) {\n      buttons.reverse();\n    }\n\n    const lockButtonProps = {\n      ...buttonProps,\n      className: `btn-${props.boxState[LOCK_COLUMN]} btn-lock`,\n      key: LOCK_COLUMN,\n      value: LOCK_COLUMN,\n    };\n\n    buttons.push(<ToggleButton {...lockButtonProps}>&nbsp;</ToggleButton>);\n\n    return buttons;\n  };\n\n  const toggleButtonGroupProps = {\n    type: \"checkbox\",\n  };\n\n  return (\n    <div className={`${displayName} ${displayName}-${props.color}`}>\n      <ToggleButtonGroup {...toggleButtonGroupProps}>\n        {getButtons(props)}\n      </ToggleButtonGroup>\n    </div>\n  );\n};\n\nexport default Row;\n","import { useState } from \"react\";\nimport produce, { current } from \"immer\";\n\nimport { STATES, LOCK_COLUMN, WINS_NEEDED_TO_LOCK_ROW } from \"../Constants\";\nimport { saveScoreCard, getScoreCard } from \"../services/DBService\";\n\nconst INITIAL_ROW_STATE = {\n  2: STATES.OPEN,\n  3: STATES.OPEN,\n  4: STATES.OPEN,\n  5: STATES.OPEN,\n  6: STATES.OPEN,\n  7: STATES.OPEN,\n  8: STATES.OPEN,\n  9: STATES.OPEN,\n  10: STATES.OPEN,\n  11: STATES.OPEN,\n  12: STATES.DISABLED,\n  [LOCK_COLUMN]: STATES.UNLOCKED,\n};\n\nconst INITIAL_REVERSED_ROW_STATE = {\n  ...INITIAL_ROW_STATE,\n  2: STATES.DISABLED,\n  12: STATES.OPEN,\n};\n\nconst initialState = produce(\n  {\n    red: {\n      boxState: { ...INITIAL_ROW_STATE },\n      locked: false,\n      winCount: 0,\n    },\n    yellow: {\n      boxState: { ...INITIAL_ROW_STATE },\n      locked: false,\n      winCount: 0,\n    },\n    green: {\n      boxState: { ...INITIAL_REVERSED_ROW_STATE },\n      locked: false,\n      reversed: true,\n      winCount: 0,\n    },\n    blue: {\n      boxState: { ...INITIAL_REVERSED_ROW_STATE },\n      locked: false,\n      reversed: true,\n      winCount: 0,\n    },\n    penalties: 0,\n  },\n  () => {}\n);\n\nconst markIntermediateBoxes = (row, box, oldState, newState) => {\n  debugger;\n  let index = row.reversed ? Number(box) + 1 : Number(box) - 1;\n  while (index <= 12 && index >= 2 && row.boxState[index] === oldState) {\n    row.boxState[index] = newState;\n    index += row.reversed ? 1 : -1;\n  }\n};\n\nconst useScoreCard = () => {\n  const [scores, setScores] = useState(() => {\n    getScoreCard().then((scorecard) => {\n      if (scorecard && scorecard.red) {\n        setScores(scorecard);\n      }\n    });\n    return initialState;\n  });\n\n  const reset = () => {\n    setScores(initialState);\n    saveScoreCard(null);\n  };\n\n  const setPenalties = (penaltyCount) => {\n    setScores(\n      produce((scores) => {\n        scores.penalties = penaltyCount;\n        saveScoreCard(current(scores));\n      })\n    );\n  };\n\n  const getFinalBox = (row) => (row.reversed ? \"2\" : \"12\");\n\n  const markBoxWon = (row, value) => {\n    debugger;\n    row.boxState[value] = STATES.WON;\n    row.winCount++;\n    markIntermediateBoxes(row, value, STATES.OPEN, STATES.BLOCKED);\n\n    const finalBox = getFinalBox(row);\n    if (value === finalBox) {\n      row.boxState[LOCK_COLUMN] = STATES.WON;\n      row.winCount++;\n      row.locked = true;\n    } else if (row.winCount >= WINS_NEEDED_TO_LOCK_ROW) {\n      row.boxState[finalBox] = STATES.OPEN;\n    }\n  };\n\n  const markBoxOpen = (row, value) => {\n    row.boxState[value] = STATES.OPEN;\n    row.winCount--;\n    markIntermediateBoxes(row, value, STATES.BLOCKED, STATES.OPEN);\n\n    const finalBox = getFinalBox(row);\n    if (value === finalBox) {\n      row.boxState[LOCK_COLUMN] = STATES.UNLOCKED;\n      row.winCount--;\n      row.locked = false;\n    } else if (row.winCount < WINS_NEEDED_TO_LOCK_ROW) {\n      row.boxState[finalBox] = STATES.DISABLED;\n    }\n  };\n\n  const lockRowForOtherPlayer = (row) => {\n    const finalBox = getFinalBox(row);\n    row.locked = true;\n    row.boxState[LOCK_COLUMN] = STATES.LOCKED;\n    row.boxState[finalBox] = STATES.BLOCKED;\n    markIntermediateBoxes(row, finalBox, STATES.OPEN, STATES.BLOCKED);\n  };\n\n  const unlockRowForOtherPlayer = (row) => {\n    const finalBox = getFinalBox(row);\n    row.locked = false;\n    row.boxState[LOCK_COLUMN] = STATES.UNLOCKED;\n    row.boxState[finalBox] =\n      row.winCount < WINS_NEEDED_TO_LOCK_ROW ? STATES.DISABLED : STATES.OPEN;\n    markIntermediateBoxes(row, finalBox, STATES.BLOCKED, STATES.OPEN);\n  };\n\n  const toggleBox = (color, value) => {\n    setScores(\n      produce((scores) => {\n        const row = scores[color];\n\n        switch (row.boxState[value]) {\n          case STATES.DISABLED:\n            break;\n          case STATES.LOCKED:\n            unlockRowForOtherPlayer(row);\n            break;\n          case STATES.OPEN:\n            if (Number(value) !== LOCK_COLUMN) {\n              markBoxWon(row, value);\n            }\n            break;\n          case STATES.UNLOCKED:\n            lockRowForOtherPlayer(row);\n            break;\n          case STATES.WON:\n            if (Number(value) !== LOCK_COLUMN) {\n              markBoxOpen(row, value);\n            }\n            break;\n          default:\n            // Leave unchanged\n            break;\n        }\n        saveScoreCard(current(scores));\n      })\n    );\n  };\n\n  return { reset, scores, setPenalties, toggleBox };\n};\n\nexport const countWonBoxes = (row) => {\n  let count = 0;\n  for (let i = 2; i <= LOCK_COLUMN; i++) {\n    count += row.boxState[i] === STATES.WON ? 1 : 0;\n  }\n  return count;\n};\n\nexport default useScoreCard;\n","import React from \"react\";\n\nimport \"./TotalsRow.scss\";\nimport { POINT_VALUES, PENALTY } from \"../Constants\";\nimport { countWonBoxes } from \"../hooks/useScoreCard\";\n\nconst displayName = \"TotalsRow\";\n\nconst TotalsRow = (props) => {\n  const totals = getTotals(props.scorecard);\n\n  return (\n    <div className={displayName}>\n      <span>Totals:</span>\n      <div className=\"Total Total-red\">\n        <div className=\"TotalText\">{totals.red > 0 ? totals.red : \" \"}</div>\n      </div>\n      <span className=\"plus\">+</span>\n      <div className=\"Total Total-yellow\">\n        <div className=\"TotalText\">\n          {totals.yellow > 0 ? totals.yellow : \" \"}\n        </div>\n      </div>\n      <span className=\"plus\">+</span>\n      <div className=\"Total Total-green\">\n        <div className=\"TotalText\">{totals.green > 0 ? totals.green : \" \"}</div>\n      </div>\n      <span className=\"plus\">+</span>\n      <div className=\"Total Total-blue\">\n        <div className=\"TotalText\">{totals.blue > 0 ? totals.blue : \" \"}</div>\n      </div>\n      <span className=\"minus\">-</span>\n      <div className=\"Total Total-penalty\">\n        <div className=\"TotalText\">\n          {totals.penalties > 0 ? totals.penalties : \" \"}\n        </div>\n      </div>\n      <span className=\"equals\">=</span>\n      <div className=\"Total Total-grandTotal\">\n        <div className=\"TotalText\">\n          {totals.total !== 0 ? totals.total : \" \"}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TotalsRow;\n\nconst getTotals = (scorecard) => {\n  const totals = {\n    red: getScore(scorecard.red),\n    yellow: getScore(scorecard.yellow),\n    green: getScore(scorecard.green),\n    blue: getScore(scorecard.blue),\n    penalties: scorecard.penalties * PENALTY,\n  };\n\n  totals.total =\n    totals.red + totals.yellow + totals.green + totals.blue - totals.penalties;\n\n  return totals;\n};\n\nconst getScore = (row) => {\n  return POINT_VALUES[countWonBoxes(row)];\n};\n","import React from \"react\";\n\nimport AppHeader from \"./AppHeader\";\nimport Penalties from \"./Penalties\";\nimport PointsList from \"./PointsList\";\nimport Row from \"./Row.js\";\nimport TotalsRow from \"./TotalsRow\";\nimport useScoreCard from \"../hooks/useScoreCard\";\n\nimport \"./ScoreCard.scss\";\n\nconst displayName = \"ScoreCard\";\n\nconst ScoreCard = (props) => {\n  const { reset, scores, setPenalties, toggleBox } = useScoreCard();\n\n  const onPenaltyToggle = (penaltyCount) => {\n    setPenalties(penaltyCount);\n  };\n\n  const onBoxToggled = (color, value) => {\n    toggleBox(color, value);\n  };\n\n  const rowProps = {\n    onBoxToggled,\n  };\n\n  return (\n    <div className={displayName}>\n      <AppHeader scoreCard={scores} onReset={reset} />\n      <Row color=\"red\" {...rowProps} {...scores.red} />\n      <Row color=\"yellow\" {...rowProps} {...scores.yellow} />\n      <Row color=\"green\" {...rowProps} {...scores.green} />\n      <Row color=\"blue\" {...rowProps} {...scores.blue} />\n      <div className=\"PointsAndPenalties\">\n        <PointsList />\n        <Penalties\n          penalties={scores.penalties}\n          onBoxToggled={onPenaltyToggle}\n        />\n      </div>\n      <TotalsRow scorecard={scores} />\n    </div>\n  );\n};\n\nexport default ScoreCard;\n","import React from \"react\";\n\nimport ScoreCard from \"./components/ScoreCard\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ScoreCard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport { initDB } from \"./services/DBService\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nasync function init() {\n  await initDB();\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n}\n\ninit();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}